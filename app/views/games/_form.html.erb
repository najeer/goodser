<%= stylesheet_link_tag "jquery-ui" %>
<%= javascript_include_tag  "jquery-1.9.1.js", 'jquery-ui', 'jquery.validate.js', 'jquery.validate.min.js'%>
<%= form_for @game, :validate => true,:html => { :class => 'form-horizontal game_form' } do |f| %>
<div width=90%>
<table class="table table-striped", border=2px, border:1px, align="center", width=90%>
  <thead>
    <tr>
      <th>Letter</th>
      <th>Name</th>
      <th>Place</th>
      <th>Animal</th>
      <th>Thing</th>
      <th>Time Count</th>
      <th>Time</th>
      
    </tr>
<tr >
  <td><input type='button' class ='btn playing' value='Play' onclick="timer()" /></td>
  <td><%= f.text_field :name, :class => 'input-large input-large-altered' %></td>
  <td><%= f.text_field :place, :class => 'input-large input-large-altered' %></td>
  <td><%= f.text_field :animal, :class => 'input-large input-large-altered' %></td>
  <td><%= f.text_field :thing, :class => 'input-large input-large-altered' %></td>
  <td><%= f.text_field :time, :id => 'but', :class => 'input-large input-large-altered1', :readOnly => true %></td>
  <td><%= f.submit "Done", :class => 'btn done' %></td>
</tr>

    

  </thead></table>
 </div> 
 <div align="right"><%= link_to t('.Show Games', :default => t("helpers.links.Show Games")),
              games_path, :class => 'btn btn-primary'  %>

</div>
<% end %>

<script type="text/javascript">


$('.playing').click(function(){
  
  $('.playing').attr("disabled", "disabled");
  $('.done').attr("disabled", false);
});
 
$('.done').submit(function(){
  $('.done').attr("disabled", "disabled");
  $('.done').onclick("stoptimer()");
  $('.playing').attr("disabled", false);
});




$(document).ready(function(){

  $('.done').attr("disabled", "disabled");
    
});
</script>


<script type="text/javascript">
var count=0;
var x;
function timer(){
x=setTimeout("timer()",1000);
count=count+1;
document.getElementById("but").value=count;
}

function stoptimer(){
clearTimeout(x);
}

</script>
<script>  
function  validate_function(){
  
$(".game_form").validate({
  rules: {
    "game[name]": {
      required: true,
      minlength: 4
    },
    "game[place]": {
      required: true,
      
    },
    "game[animal]": {
      required: true,
      
    },
    "game[thing]": {
      required: true,
      
    }
  },
  messages: {
   "game[name]" : {
      required: "Name should not be blank",
      minlength: jQuery.format("At least {4} characters required!")
    },
   "game[place]" : {
      required: "please enter your place"
      
    },
   "game[animal]" : {
      required: "animal should not be blank"
    },
   "game[thing]" : {
      required: "thing should not be blank"
    }
  }
});

}

$(document).ready(function() {
  validate_function();
$(document).onchange(function(){
    validate_function();
  });

 });
</script>
<br>
<br>
<br>

<!DOCTYPE html>
<html>
  <head>
    <title>Place Autocomplete Address Form</title>
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no">
    <meta charset="utf-8">
    <style>
      html, body, #map-canvas {
        height: 100%;
        margin: 0px;
        padding: 0px
      }
    </style>
    <link type="text/css" rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:300,400,500">
    <script src="https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=places"></script>
    <script>
// This example displays an address form, using the autocomplete feature
// of the Google Places API to help users fill in the information.

var placeSearch, autocomplete;
var componentForm = {
  street_number: 'short_name',
  route: 'long_name',
  locality: 'long_name',
  administrative_area_level_1: 'short_name',
  country: 'long_name',
  postal_code: 'short_name'
};

function initialize() {
  // Create the autocomplete object, restricting the search
  // to geographical location types.
  autocomplete = new google.maps.places.Autocomplete(
      /** @type {HTMLInputElement} */(document.getElementById('autocomplete')),
      { types: ['geocode'] });
  // When the user selects an address from the dropdown,
  // populate the address fields in the form.
  google.maps.event.addListener(autocomplete, 'place_changed', function() {
    fillInAddress();
  });
}

// [START region_fillform]
function fillInAddress() {
  // Get the place details from the autocomplete object.
  var place = autocomplete.getPlace();

  for (var component in componentForm) {
    document.getElementById(component).value = '';
    document.getElementById(component).disabled = false;
  }

  // Get each component of the address from the place details
  // and fill the corresponding field on the form.
  for (var i = 0; i < place.address_components.length; i++) {
    var addressType = place.address_components[i].types[0];
    if (componentForm[addressType]) {
      var val = place.address_components[i][componentForm[addressType]];
      document.getElementById(addressType).value = val;
    }
  }
}
// [END region_fillform]

// [START region_geolocation]
// Bias the autocomplete object to the user's geographical location,
// as supplied by the browser's 'navigator.geolocation' object.
function geolocate() {
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(function(position) {
      var geolocation = new google.maps.LatLng(
          position.coords.latitude, position.coords.longitude);
      autocomplete.setBounds(new google.maps.LatLngBounds(geolocation,
          geolocation));
    });
  }
}
// [END region_geolocation]

    </script>

    <style>
      #locationField, #controls {
        position: relative;
        width: 480px;
      }
      #autocomplete {
        position: absolute;
        top: 0px;
        left: 0px;
        width: 99%;
      }
      .label {
        text-align: right;
        font-weight: bold;
        width: 100px;
        color: #303030;
      }
      #address {
        border: 1px solid #000090;
        background-color: #f0f0ff;
        width: 480px;
        padding-right: 2px;
      }
      #address td {
        font-size: 10pt;
      }
      .field {
        width: 99%;
      }
      .slimField {
        width: 80px;
      }
      .wideField {
        width: 200px;
      }
      #locationField {
        height: 20px;
        margin-bottom: 2px;
      }
    </style>
  </head>

  <body onload="initialize()"><div><h5>City:</h5>
    <div id="locationField">
      <input id="autocomplete" placeholder="Enter your city"
             onFocus="geolocate()" type="text"></input></div>
  </body>
</html>